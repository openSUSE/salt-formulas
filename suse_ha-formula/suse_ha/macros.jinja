{#-
Jinja macros file providing helper functions for SUSE HA related Salt state files
Copyright (C) 2023-2024 SUSE LLC <georg.pfuetzenreuter@suse.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#}

{%- from './map.jinja' import resources_dir, management -%}
{%- macro ha_resource(resource, class, type, instance_attributes, operations, meta_attributes={}, provider='NONE', clone={}, requires=[]) %}
ha_resource_file_{{ resource }}:
  file.managed:
    - name: {{ resources_dir }}/{{ resource }}.xml
    - source: salt://suse_ha/files/cib/{{ 'clone' if clone else 'resource' }}.xml.j2
    - template: jinja
    - context:
        {%- if clone %}
        {%- if 'resource_id' in clone -%}
        {%- set clone_id = clone['resource_id'] %}
        {%- else %}
        {%- set clone_id = resource ~ '-clone' %}
        {%- endif %}
        clones:
          {{ clone_id }}:
            meta_attributes: {{ clone.get('meta_attributes', {}) }}
        {%- endif %}
        primitives:
          {{ resource }}:
            resource_class: {{ class }}
            resource_type: {{ type }}
            attributes: {{ instance_attributes }}
            operations: {{ operations }}
            meta_attributes: {{ meta_attributes }}
            provider: {{ provider }}
    {%- if requires is not none %}
    - require:
      - file: ha_resources_directory
      {%- for require in requires %}
      - {{ require }}
      {%- endfor %}
    {%- endif %}

ha_resource_update_{{ resource }}:
  cmd.run:
    - name: crm configure load xml update {{ resources_dir }}/{{ resource }}.xml
    - onchanges:
        - ha_resource_file_{{ resource }}
{#- to-do: somehow require this but allow for individual run of suse_ha.resources ?
    - require:
        - pacemaker.service
#}

ha_resource_start_{{ resource }}:
   cmd.run:
     - name: crm resource start {{ resource }}
     - unless: test $(crm resource status {{ resource }}|awk '{ print $4; exit }') == running
     - require:
       - cmd: ha_resource_update_{{ resource }}
{%- endmacro %}

{%- macro property(option, value=None) -%}
{%- if value is none %}
{%- set value = management.get(option, management.get(option.replace('-', '_'))) %}
{%- endif %}
ha_property_{{ option }}:
  cmd.run:
{%- if value is none %}
    - name: 'crm attribute -D -n {{ option }}'
    - onlyif: 'crm_attribute -G -n {{ option }}'
{%- else %}
    - name: 'crm configure property {{ option }}={{ value }}'
    - unless: 'test $(crm configure get_property {{ option }}) == {{ value }}'
{%- endif %}
    - require:
      - pacemaker.service
{%- endmacro -%}

{%- macro rsc_default(option) -%}
{%- set value = management.get(option.replace('-','_'), None) %}
{%- if value is not none %}
ha_rsc_default_{{ option }}:
  cmd.run:
    - name: 'crm configure rsc_defaults {{ option }}={{ value }}'
    - unless: 'test $(crm_attribute -t rsc_defaults -G -n {{ option }} -q) == {{ value }}'
    - require:
      - pacemaker.service
{%- else %}
{%- do salt.log.debug('suse_ha: not configuring ' ~ option) %}
{%- endif %}
{%- endmacro -%}

{%- macro ipmi_secret(host, secret, dc) -%}
ha_fencing_ipmi_secret_{{ host }}:
  file.managed:
    - name: /etc/pacemaker/ha_ipmi_{{ host }}
    - contents: '{{ secret }}'
    - contents_newline: False
    - mode: '0600'
    - require:
      - suse_ha_packages
{%- if dc %}
    - require_in:
      - ha_resource_file_{{ host }}
      - ha_resource_update_{{ host }}
{%- endif %}
{%- endmacro -%}

{%- macro restart() -%}
{%- set file = '/var/adm/suse_ha_pending_restart' %}

{%- if salt ['file.file_exists'](file) or is_standby %}
  {%- if is_standby %}

suse_ha_restart:
  cmd.run:
    - name: /usr/sbin/crm cluster restart
    - shell: /bin/sh
    - timeout: 600

suse_ha_clear_restart:
  file.absent:
    - name: {{ file }}
    - require:
        - cmd: suse_ha_restart

  {%- else %}
    {%- do salt.log.warning('suse_ha: restart from previous execution is still pending, node is not in standby mode!')
  {%- endif %} {#- close inner standby check #}

{%- else %}

suse_ha_note_restart_{{ service }}:
  file.managed:
    - name: {{ file }}
    - replace: False

{%- endif %} {#- close file or standby check #}
{%- endmacro -%}
