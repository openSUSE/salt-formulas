{#-
Jinja variable file for inclusion in SUSE HA related Salt state files
Copyright (C) 2023-2024 SUSE LLC <georg.pfuetzenreuter@suse.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#}

{%- import_yaml './defaults.yaml' as defaults -%}
{%- set hapillar  = salt.pillar.get('suse_ha', default=defaults, merge=True, merge_nested_lists=False) -%}
{%- set resources_dir = hapillar.get('resources_dir') -%}

{%- set cluster = hapillar.get('cluster', {}) -%}
{%- set management = hapillar.get('management', {}) -%}
{%- if 'multicast' in hapillar -%}
{%- set multicast = hapillar['multicast'] -%}
{%- else -%}
{%- set multicast = {} -%}
{%- do salt.log.error('suse_ha: No multicast pillar provided - configuration might be incomplete!') -%}
{%- endif -%}
{%- set fencing_base = hapillar.get('fencing', {}) -%}
{%- set resources = hapillar.get('resources', {}) -%}
{%- set sysconfig = hapillar.get('sysconfig', {}) -%}

{%- set fence_agents = ['external_ipmi', 'external_sbd'] -%}
{%- set fence_ns = namespace(construct=false) -%}

{%- for agent in fence_agents -%}
{%- if agent.replace('external_', '') in fencing_base -%}
{%- import_yaml './defaults/fencing/' ~ agent ~ '.yaml' as fencing_defaults -%}
{%- do fencing_base.update(fencing_defaults) -%}
{%- set fence_ns.construct = true -%}
{%- endif -%}
{%- endfor -%}

{%- if fence_ns.construct -%}
{%- set fencing = salt.pillar.get('suse_ha:fencing', default=fencing_base, merge=True) -%}
{%- else -%}
{%- set fencing = fencing_base -%}
{%- endif -%}

{%- set sbd = fencing.get('sbd', {}) -%}

{%- set host = grains['host'] -%}
{%- set id = grains['id'] -%}

{%- set clustername = cluster.get('name') -%}
{%- if clustername is none -%}
{%- set nodes = [] -%}
{%- else -%}
{%- set nodes = salt['mine.get'](clustername ~ '*', 'network.get_hostname') | sort -%}
{%- endif -%}
{%- if nodes | length -%}
{%- set primary = nodes[0] -%}
{%- do salt.log.debug('suse_ha: elected primary node is ' ~ primary) -%}
{%- else -%}
{%- do salt.log.error('suse_ha: no nodes found in cluster') -%}
{%- set primary = None -%}
{%- endif -%}

{%- if host == primary or id == primary -%}
{%- set is_primary = True -%}
{%- else -%}
{%- set is_primary = False -%}
{%- endif -%}
{%- do salt.log.debug('suse_ha: is_primary: ' ~ is_primary) -%}

{%- set cmd_kwargs = {
      'clean_env': True,
      'python_shell': False,
      'shell': '/bin/sh',
    }
-%}
{%- set cmd_kwargs_ir = {
      **cmd_kwargs,
      'ignore_retcode': True,
    }
-%}

{%- if salt['cmd.has_exec']('/usr/sbin/crm_standby') and salt['cmd.retcode']('/usr/bin/systemctl is-active pacemaker', **cmd_kwargs_ir) == 0 %}
  {%- set is_standby = salt['cmd.run_stdout']('/usr/sbin/crm_standby -Gq', **cmd_kwargs) == 'on' -%}
  {%- do salt.log.debug('suse_ha: standby: ' ~ is_standby) -%}
{%- else -%}
  {%- set is_standby = True -%}
  {%- do salt.log.debug('suse_ha: assuming standby') -%}
{%- endif -%}
